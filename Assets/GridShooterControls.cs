//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GridShooterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GridShooterControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GridShooterControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GridShooterControls"",
    ""maps"": [
        {
            ""name"": ""GridShooter"",
            ""id"": ""71dc57e1-30a9-487c-aae4-59ac3cfaceaf"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""0b63f066-68f7-416e-b989-ebca01114c85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""ba51c422-6059-46f6-ac4d-f8c87c06c046"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""701585ff-450a-4ad8-b8f9-cddd8b73dc6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""152f2b10-bacc-4332-99c2-84ffd77448f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""70d88e14-a118-4a67-8c50-afdb2581f93d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""f204e71e-6d5b-48cd-9c9c-83bbd8d1753b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eed2d3cc-63cc-46fd-b0f1-7c14bc124f7c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GridShooterMinigame"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a9888e3-179e-4707-aecb-2313d569fbe9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GridShooterMinigame"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8edfe98d-e79d-4347-9b67-491aeeb68933"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GridShooterMinigame"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c06e3654-c5ee-4379-bdd4-aeb44dc65785"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GridShooterMinigame"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4b3b320-5fe8-4de1-b706-d52029132abe"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GridShooterMinigame"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3425eb2f-6859-41c0-b61b-192975f65463"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GridShooterMinigame"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""GridShooterMinigame"",
            ""bindingGroup"": ""GridShooterMinigame"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // GridShooter
        m_GridShooter = asset.FindActionMap("GridShooter", throwIfNotFound: true);
        m_GridShooter_Fire = m_GridShooter.FindAction("Fire", throwIfNotFound: true);
        m_GridShooter_Reload = m_GridShooter.FindAction("Reload", throwIfNotFound: true);
        m_GridShooter_Left = m_GridShooter.FindAction("Left", throwIfNotFound: true);
        m_GridShooter_Right = m_GridShooter.FindAction("Right", throwIfNotFound: true);
        m_GridShooter_Up = m_GridShooter.FindAction("Up", throwIfNotFound: true);
        m_GridShooter_Down = m_GridShooter.FindAction("Down", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GridShooter
    private readonly InputActionMap m_GridShooter;
    private List<IGridShooterActions> m_GridShooterActionsCallbackInterfaces = new List<IGridShooterActions>();
    private readonly InputAction m_GridShooter_Fire;
    private readonly InputAction m_GridShooter_Reload;
    private readonly InputAction m_GridShooter_Left;
    private readonly InputAction m_GridShooter_Right;
    private readonly InputAction m_GridShooter_Up;
    private readonly InputAction m_GridShooter_Down;
    public struct GridShooterActions
    {
        private @GridShooterControls m_Wrapper;
        public GridShooterActions(@GridShooterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_GridShooter_Fire;
        public InputAction @Reload => m_Wrapper.m_GridShooter_Reload;
        public InputAction @Left => m_Wrapper.m_GridShooter_Left;
        public InputAction @Right => m_Wrapper.m_GridShooter_Right;
        public InputAction @Up => m_Wrapper.m_GridShooter_Up;
        public InputAction @Down => m_Wrapper.m_GridShooter_Down;
        public InputActionMap Get() { return m_Wrapper.m_GridShooter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GridShooterActions set) { return set.Get(); }
        public void AddCallbacks(IGridShooterActions instance)
        {
            if (instance == null || m_Wrapper.m_GridShooterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GridShooterActionsCallbackInterfaces.Add(instance);
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(IGridShooterActions instance)
        {
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(IGridShooterActions instance)
        {
            if (m_Wrapper.m_GridShooterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGridShooterActions instance)
        {
            foreach (var item in m_Wrapper.m_GridShooterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GridShooterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GridShooterActions @GridShooter => new GridShooterActions(this);
    private int m_GridShooterMinigameSchemeIndex = -1;
    public InputControlScheme GridShooterMinigameScheme
    {
        get
        {
            if (m_GridShooterMinigameSchemeIndex == -1) m_GridShooterMinigameSchemeIndex = asset.FindControlSchemeIndex("GridShooterMinigame");
            return asset.controlSchemes[m_GridShooterMinigameSchemeIndex];
        }
    }
    public interface IGridShooterActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
}
